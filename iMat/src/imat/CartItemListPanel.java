/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imat;

import imat.controller.CartManager;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import se.chalmers.ait.dat215.project.CartEvent;
import se.chalmers.ait.dat215.project.IMatDataHandler;
import se.chalmers.ait.dat215.project.Product;
import se.chalmers.ait.dat215.project.ShoppingCart;
import se.chalmers.ait.dat215.project.ShoppingCartListener;
import se.chalmers.ait.dat215.project.ShoppingItem;

/**
 *
 * @author win8
 */
public class CartItemListPanel extends javax.swing.JPanel implements ShoppingCartListener {

    /**
     * Creates new form CartListPanel
     */
    public CartItemListPanel() {
        initComponents();

        //addShoppingItem(new ShoppingItem(p2, 4));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    public void insertShoppingItem(ShoppingItem item) {
        if (item == null || item.getAmount() <= 0) {
            return;
        }
        Product p = item.getProduct();
        for (ShoppingItem existingItem : itemList) {
            if (existingItem.getProduct().equals(p)) {
                item.setAmount(item.getAmount() + existingItem.getAmount());
                cart.removeItem(existingItem);

                break;
            }
        }
        itemList.add(item);

        Collections.sort(itemList, new Comparator<ShoppingItem>() {

            @Override
            public int compare(ShoppingItem o1, ShoppingItem o2) {
                return o1.getProduct().getName().compareTo(o2.getProduct().getName());
            }
        });
        updateList();
    }

    public void removeItem(ShoppingItem item) {
        itemList.remove(item);
        updateList();
    }

    public void clearList() {
        itemList.clear();
        updateList();
    }

    public void updateList() {
        this.removeAll();

        for (ShoppingItem item : itemList) {
            add(new CartItemPanel(item));
        }
        updateSize();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    ShoppingCart cart = IMatDataHandler.getInstance().getShoppingCart();
    CartManager cartManager = CartManager.getInstance();
    @Override
    public void shoppingCartChanged(CartEvent ce) {

        ShoppingItem item = ce.getShoppingItem();

        if (item == null && cart.getItems().isEmpty()) {
            clearList();
        } else if (ce.isAddEvent()) {
            insertShoppingItem(item);
        } else if (!cartManager.containsShoppingItem(item)) {
            System.out.println("remove item");
            removeItem(item);
        }
        else { //amount was changed
            updateList();
        }
    }

    public void updateSize() {
        setSize(getPreferredSize());
        setMaximumSize(getPreferredSize());
        revalidate();
    }
    HashMap<ShoppingItem, CartItemPanel> cartItemPanels = new HashMap<>();
    ArrayList<ShoppingItem> itemList = new ArrayList<>();

}
